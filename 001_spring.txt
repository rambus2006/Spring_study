{ spring 사이트 }
(각 의미) 
Artifact - 

Dependencies
- 원하는 라이브러리를 추가할 수 있는 기능 

Artifact
- 프로젝트 이름

Name
- 하위폴더 이름 
application.properties
- 환경변수들이 있는 공간 

demoApplication 
com.example.demo의 끝부분 + Application 으로 파일명이 지어진다. 


{ 스프링 개념 }
- 거대한 애플리케이션을 개발하기 위해 미리 만들어둔 툴에서부터 시작되었다. 
  (웹 개발을 위해 만들어진 것이 아니었다.하지만 개발 가능 ) 

- 엔터프라이즈 환경에서 작동할 어플리케이션을 손쉽게 개발
   =대용량의 어플리케이션을 만들 때 유용하게 사용할 수 있다.
 
- 프로젝트 모듈 형식으로 작동
   - 스프링 생태계에서 활용할 수 있는 여러 가지 서브 프로젝트들을 제공함
   - https://spring.io/projects 에 가면 스프링에서 제공하는 여러 서비스들이 있다. 
   - 필요한 모듈들을 가져다가 쓸 수 있다. 제일 많이 쓰이는 것은 spring data, spring security이다. 
   - ex) 삼성 공화국이 되어서 편의점도 삼서, 삶에 삼성이 가득 -> spring 이 이런식으로 되어있다. 

<스프링의 단점>
- 스프링만 쓸 때 환경설정이 매우 오래걸린다. 
-ex) 레스토랑에 들어왔는데 종업원들의 유니폼이나, 접시들을 다 정해야 한다. 
- 사람마다 쓰는 설정이 달라 연동이 매우 어렵다. 옛날에는 톰캣부터 다 깔아야 한다. 
=>그래서 나오게 된 것이 스프링 부트 

{스프링 부트 개념 }
- 기존의 스프링과 달리 빈(Bean) 생성과 관련된 설정 및 기타 설정들을 자동으로 진행하여 설정 작업에 대한 부담을 줄일 수 있도록 만든 프레임워크
- 스프링 부트는 Opinionated 프레임워크
     - 스프링부트는 스프링에서 골라둔 설정들을 가지고 해야 한다는 단점이 있음 
     - 가장 자주 사용되는 추천할만한 스프링 관련 서드 파티 라이브러리를 바로 사용할 수 있도록 미리 일종의 가이드를 제공
- 의존성 파일을 통해 임베디드 웹 서버(ex: Tomcat, Jetty, Undertow와 같은 서블릿 컨테이너)를 내장하여 배포할 수 있게 하므로 따로 설치가 필요 없음
     - gradle 설정 파일의 내용을 변경하여 손쉽게 사용할 서블릿 컨테이너를 변경 가능
- 스프링과 스프링 부트가 완전히 별개의 개념이 아니고 스프링 부트에서 스프링을 활용함
	- 스프링 부트 => 스프링 + @

{ Bean? }
- java 기초문법이 되어있어야 한다. -> 자바문법 병행필수 (자꾸 물어보니까 빠른 시일 내에 하자) 
- 추상클래스 
- 스프링 구조가 매우 복잡하다. 
- 자바(커피) -> bean(콩) 
- 어플리케이션을 실행하는데 좀 중요한 객체들을 bean이라고 한다. 
- Application Context(보따리) 안에 여러개의 Bean들을 보관하고 관리하고  있다. (Bean - 객체 ) 
객체가 필요할 때마다 Bean을 넣어서 사용한다. 
- Application Context = IOC 컨테이너 


{ AnnotationConfigApplicationContext }
- 어노테이션 기반으로 동작한다. 
- 어노테이션 ( @_______) 으로 되어 있는 것 
- Application Context 관리하는 역할 

*jdk - 21.이후 버전 사용하기 
*settings 에 jdk-21로 바꾸기 -> 아니면 환경변수 없애기 

{ Bean 만들기 }
Bean을 POJO(Plain Old Java Object)라고 부르는 경우도 있는데 말 그대로 그냥 일반적인 객체임을 강조하기 위해서 POJO라고 부름
옛날에는 EJB 이었다. 현재는 우리가 익히 쓰는 클래스를 객체로 쓰고 있다. 
- @Component 를 붙이면 Bean이 된다. 
- 일반적으로 클래스이름(소문자 시작)으로 bean 이름을 짓는다. 
<이름을 바꾸고 싶을 때>
@Component("hello Bean");l
만든 Bean은 AnnotationConfigApplication 으로 들어간다. 

- 합성 
<컴포넌트스캔 >
- com.example.di 까지가 스캔범위이기 때문에 이 안에서 하위패키지를 만들거나 Bean 을 만들어야 한다. 

<스테레오 타입어노테이션>
- @Controller
    - Spring MVC에서 사용하는, HTTP 요청을 받아들여서 적절한 응답을 돌려주는 메서드를 보관할 역할을 하는 컴포넌트
    - Controller 어노테이션이 아니라 Component 어노테이션을 붙여도 Bean으로 인식하기는 하지만, 프론트 컨트롤러로 사용되는 DispatcherServlet이 요청을 위임할 컨트롤러 객체로 인식하지 않게 되므로 반드시 붙여주어야 함
    - 즉, Controller 어노테이션은 일종의 마커 어노테이션(marker annotation)처럼 작동함
    
@Service
- 프로그램의 비지니스 로직을 담당할 컴포넌트
	- 은행앱을 만들 때 로직을 검사해야 하는데, 그것들이 포함되어 있는 것이 @Service

비즈니스 로직과 밀접하게 관련된 유틸리티 컴포넌트
@Configuration도 Bean으로 등록된다. 

<제어의 역전 >
제어의 역전(Inversion of Control)은 특히 객체 생성 및 의존성 주입과 관련된 프로그램의 실행 흐름을 직접 제어하기보다 외부에서 관리하도록 하자는 전략(+구현)
귀찮은 것을 안해도 되서 좋은 것이다. 
<의존관계 주입>
의존 관계 주입(Dependency Injection)은 말 그대로 객체가 의존하는 특정 객체를 대신 생성하고, 주입도 해주는 디자인 패턴을 의미함

<요약>
Bean이란?
중요한 객체 
Application Context란?
Bean을 담고 있는 보따리 
내가 직접 설정(생성자, 세터 호출) 하여 만든 객체 Bean 등록하려면?
configruation 이런거 해서 하면 된다. 
Autowired의 용도?
의존성을 주입하는 용도

