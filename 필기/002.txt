{ 생성자 주입 }
public MyCalculatorService(Calculator calculator) - 에 주입(전달)되고
this.calculator = calculator; -> calculator 객체에 전달된다. 
-> @Autowired가 붙어있고, Bean 을 갖고 있으면 파라미터가 있는 메서드에 넣을 수 있다 

{ setter 주입 }
크게는 필드 주입과 메서드 주입만 있다고 봐도 무방하다. -> 생성자와 setter도 메서드이기 대문이다. 

=> 생성자 주입이 가장 좋다. 그 이유는 final 을 쓸 수 있기 때문이다. 초기에만 정의되고 나중에 바꿀 수없는 값이 된다. 
그러면 final 때문에 생성자에서만 값을 바꿀 수 있다. => 실수로라도 대입을 해서 값이 바뀔일이 없다. 의존성 주입을 해도 바뀔일이 잘 없다. 

=> private 을 써서 외부에서 접근하지 못하지만 스프링에 있는 application context에서 알아서 접근할 수 있게 해준다. 

@Autowired 가 있으면 호출하려고 한다.-> bean이 있는지 검사하려고 한다 .

@Resource, @Inject와 같은 의존성 주입을 위한 JAVA 표준 어노테이션도 존재하지만, 스프링에서 제공하는 어노테이션인 Autowired가 가장 널리 사용됨 -> 자바에서도 표준을 만드려고 했지만 별 의미는 없다. 

 
{ @Qualifier 어노테이션과 Bean 이름을 사용하여 Bean 주입 받기 }
A라는 인터페이스를 구현하는 클래스B,C가 있고, 이 클래스들을 bean으로 등록했을 때 
의존성 주입을 하려고 할 때 
A한테 타입을 알려달라고 했을 때 B타입과 C타입이 있어 타입을 줄 수없어 에러가 뜬다. 
이 에러가 나는 것을 방지하기ㅣ 위해 구체적으로 알려주기 위해 @Qualifier 어노테이션을 사용한다. 

강의 있는지 찾아보기 - 스프링 부트 
03 - 03번은 수업 x -> 대신 알아둬야 한다. 


{ Bean 범위(Bean Scope) 설정}
기본적으로 Bean을 만들때에는 싱글턴 객체를 만드는 전략을 사용함
즉, 하나의 객체만 만들고 해당 객체를 모든 곳에서 공유해서 사용함
따라서 여러 곳에서 의존성 주입이 된다고 하더라도 실질적으로는 같은 메모리 주소를 공유하는 완전히 똑같은 객체가 주입됨

싱글턴 객체 - 원래 객체를 돌려쓴다. 

{ @Value 어노테이션을 이용한 설정값 주입 }

{ BeanPostProcessor 구현을 통한 Bean 생성 전, 생성 후 콜백 메서드 정의 (*) }
- 후속처리를 할 떄 쓴다. 




















